

## optimisation plan ##
- on _match() cache current input prompt (chars / flags) and autocomplete values
- on re-call of _match() check input expr against cached inputchars (and flags?) AND the autocomplete values
    - use cahced if: selectionmode matches
        - if inputchars is the same as cached
        - if inputchars matches any key in cached results (ie. from autocompleted results)
    - otherwise re-match
- match will store dict of results as keys with values bufnr or -1 (that could not be converted to a bufnr)
    - {'file.txt': 2, 'test': -1}

- this way, we can show the bufnr (or expanded path) in the mutliselect as context (or some other derived value)


## string matching algo ##
- every buffer will be given a score based on the matching technique
- in the end, the results will be collated by 
    - retrieve highest score in results
    - filter and keep results that are equal to hightest score




